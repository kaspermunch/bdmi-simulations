---
title: "Some title"
author: "Kasper Munch"
---


## Getting up

- Turn off alarm
- Get out of bed

## Going to sleep

- Get in bed
- Count sheep

## Going to sleep

### Gamma

{{< embed bdmi.ipynb#fig-interspersed >}}

{{< embed bdmi.ipynb#doc-gamma >}}

## Gettign SVG figures to rescale

1. you’ll need to run babel on it. copy the code on the next slide
2. it needs a polyfill for Promise
3. it needs a polyfill for fetch (called “whatwg-fetch-polyfill” or so)

## Gettign SVG figures to rescale

> I don't really understand why you need to compile javascript to have another javascript code but whatever :-)

haha, it’s new JS to older JS. you see those lets and =>? most browsers can’t handle them yet, so babel converts it.

> what is a polyfill ?

it’s simply a script that you include which makes new APIs available to for all browsers.

here’s [es6-promise](https://github.com/stefanpenner/es6-promise), which makes new Promise and Promise.all(...) and so on work, and here is [fetch](https://github.com/JakeChampion/fetch), which makes fetch(...) work.

## Gettign SVG figures to rescale

```
function loadDataSrcSVG() {
  let svgsToLoad = document.querySelectorAll('svg[data-src]');
  let loadSVGs = Array.map.call(svgsToLoad, svg => {
    fetch(svg.getAttribute('data-src')).then(response => response.text()).then(svgCode => {
      let svgDoc = new DOMParser().parseFromString(svgCode, 'image/svg+xml');
      let newSVG = svgDoc.documentElement;
      for (let i = 0; i < svg.attributes.length; i++) {
        let attr = svg.attributes[i];
        newSVG.setAttribute(attr.name, attr.value);
      }
      svg.parentNode.replaceChild(newSVG, svg);
    });
  });
  Promise.all(loadSVGs).then(val => {
    let stretchSVGs = document.querySelectorAll('svg.stretch:not([preserveAspectRatio])');
    Array.map.call(stretchSVGs, svg => {
      if (!svg.hasAttribute('viewBox')) {
        let w = svg.getAttribute('width');
        let h = svg.getAttribute('height');
        svg.setAttribute('viewBox', `0 0 ${w} ${h}`);
      }
      svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
    });
  });
}
```